#version 330 core

struct Material{

	//vec3 ambient;
	sampler2D diffuse;
	sampler2D specular;
	float shininess;
};

struct DirLight{

	vec3 direction;

	vec3 ambient;
	vec3 diffuse;
	vec3 specular;
};


struct PointLight{

	vec3 position;

	vec3 ambient;
	vec3 diffuse;
	vec3 specular;

	float constant;
	float linear;
	float quadratic;
	
};


struct Spotlight{

	vec3 position;
	vec3 direction;

	vec3 ambient;
	vec3 diffuse;
	vec3 specular;

	float innerCutOff;
	float outerCutOff;
};


in vec2 TexCoord;
in vec3 Normal;
in vec3 fragPos;  
//#define pointLightsNumber 2;
//uniform sampler2D ourTexture1;
uniform Material material;
uniform DirLight dirLight;
uniform PointLight pointLight;
uniform Spotlight spotlight;



out vec4 ourColor;

vec3 calculateDirLight();
vec3 calculatePointLight();
vec3 calculateSpotlight();




void main()
{
	vec3 dirLight = calculateDirLight();
	vec3 pointLight = calculatePointLight();
	vec3 spotlight = calculateSpotlight();
	//ourColor = vec4(dirLight, 1.0);
	ourColor = vec4(dirLight + pointLight + spotlight, 1.0);
	
}


vec3 calculateDirLight(){



	vec3 ambient = dirLight.ambient * vec3(texture(material.diffuse, TexCoord));

	vec3 lightDir = normalize(-dirLight.direction);
	if(Normal.x < 0.01 && Normal.x > -0.01){ return vec3(0.0, 0.0, 1.0);}
	if(lightDir.x < 0.01 && lightDir.x > -0.01){ return vec3(0.0, 1.0, 1.0);}
	float diffIP = max( dot(Normal, lightDir) ,0.0);
	if(diffIP == 0.0){
		return vec3(1.0, 0.0, 0.0);
	}
	vec3 diffuse = dirLight.diffuse * diffIP * vec3(texture(material.diffuse, TexCoord));

   	vec3 reflectDir = reflect(-lightDir, Normal);
    	float specIP = pow(max(dot(spotlight.direction, reflectDir), 0.0), material.shininess);
	vec3 specular = dirLight.specular * specIP * vec3(texture(material.diffuse, TexCoord));

	return ambient + diffuse + specular;

	//return ambient + diffuse;
}

vec3 calculatePointLight(){

	float distance = length(fragPos - pointLight.position);
	//float attenuation = 1/(pointLight.constant + pointLight.linear * distance + pointLight.quadratic * distance * distance);
	float attenuation = 1.;

	vec3 ambient = pointLight.ambient * attenuation* vec3(texture(material.diffuse, TexCoord));

	vec3 lightDir = normalize(pointLight.position - fragPos);
	float diffIP = max( dot(Normal, lightDir) ,0.0);
	vec3 diffuse = pointLight.diffuse * diffIP * attenuation* vec3(texture(material.diffuse, TexCoord));

   	vec3 reflectDir = reflect(-lightDir, Normal);
    	float specIP = pow(max(dot(spotlight.direction, reflectDir), 0.0), material.shininess);
	vec3 specular = pointLight.specular * specIP * attenuation* vec3(texture(material.specular, TexCoord));

	return ambient + diffuse + specular;
}



vec3 calculateSpotlight(){

	vec3 ambient = spotlight.ambient * vec3(texture(material.diffuse, TexCoord));
	vec3 lightDir = normalize(spotlight.position - fragPos);

	float theta     = dot(lightDir, normalize(-spotlight.direction));
	float epsilon   = spotlight.innerCutOff - spotlight.outerCutOff;
	float intensity = clamp((theta - spotlight.outerCutOff) / epsilon, 0.0, 1.0);  


	
	float diffIP = max( dot(Normal, lightDir) ,0.0);
	vec3 diffuse = intensity * spotlight.diffuse * diffIP * vec3(texture(material.diffuse, TexCoord));

   	vec3 reflectDir = reflect(-lightDir, Normal);
    	float specIP = pow(max(dot(spotlight.direction, reflectDir), 0.0), material.shininess);
	vec3 specular = intensity * spotlight.specular * specIP * vec3(texture(material.specular, TexCoord));

	return ambient + diffuse + specular;
}

